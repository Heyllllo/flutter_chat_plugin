// Mocks generated by Mockito 5.4.5 from annotations
// in chat_plugin/test/chat_plugin_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:chat_plugin/chat_plugin_platform_interface.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ChatPluginPlatform].
///
/// See the documentation for Mockito's code generation for more information.
class MockChatPluginPlatform extends _i1.Mock
    implements _i2.ChatPluginPlatform {
  MockChatPluginPlatform() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> initialize({
    required String? baseUrl,
    required String? tenantIndex,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#initialize, [], {
              #baseUrl: baseUrl,
              #tenantIndex: tenantIndex,
            }),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<Map<String, dynamic>> sendMessage({
    required String? message,
    int? chatBotLogId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#sendMessage, [], {
              #message: message,
              #chatBotLogId: chatBotLogId,
            }),
            returnValue: _i3.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i3.Future<Map<String, dynamic>>);

  @override
  _i3.Stream<String> streamResponse({
    required int? chatBotLogId,
    required String? message,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#streamResponse, [], {
              #chatBotLogId: chatBotLogId,
              #message: message,
            }),
            returnValue: _i3.Stream<String>.empty(),
          )
          as _i3.Stream<String>);

  @override
  _i3.Future<Map<String, dynamic>> saveChatMessage({
    required String? message,
    required int? chatBotLogId,
    int? chatBotLogMessageId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#saveChatMessage, [], {
              #message: message,
              #chatBotLogId: chatBotLogId,
              #chatBotLogMessageId: chatBotLogMessageId,
            }),
            returnValue: _i3.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i3.Future<Map<String, dynamic>>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}
